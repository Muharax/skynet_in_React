{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Neo\\\\Desktop\\\\WWW\\\\react\\\\skynet\\\\skynet\\\\src\\\\test\\\\siatka-izometryczna.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Stage, Layer, Rect } from 'react-konva';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GRID_SIZE = 50;\nconst TILE_SIZE = 30;\nconst TILE_WIDTH = TILE_SIZE;\nconst TILE_HEIGHT = TILE_SIZE / 2;\nfunction Tile({\n  gridX,\n  gridY\n}) {\n  _s();\n  const [isHovered, setIsHovered] = useState(false);\n\n  // Ustalamy izometryczne współrzędne\n  const posX = (gridX - gridY) * TILE_WIDTH / 2;\n  const posY = (gridX + gridY) * TILE_HEIGHT / 2;\n  return /*#__PURE__*/_jsxDEV(Rect, {\n    x: posX,\n    y: posY,\n    width: TILE_WIDTH,\n    height: TILE_HEIGHT,\n    fill: isHovered ? '#f00' : (gridX + gridY) % 2 === 0 ? '#ccc' : '#999',\n    strokeWidth: 1,\n    stroke: \"#000\",\n    onMouseEnter: () => setIsHovered(true),\n    onMouseLeave: () => setIsHovered(false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n}\n_s(Tile, \"FPQn8a98tPjpohC7NUYORQR8GJE=\");\n_c = Tile;\nfunction CanvasComponent() {\n  const tiles = [];\n  for (let i = 0; i < GRID_SIZE; i++) {\n    for (let j = 0; j < GRID_SIZE; j++) {\n      tiles.push( /*#__PURE__*/_jsxDEV(Tile, {\n        gridX: i,\n        gridY: j\n      }, `${i}-${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 18\n      }, this));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(Stage, {\n    width: GRID_SIZE * TILE_SIZE * 2,\n    height: GRID_SIZE * TILE_SIZE,\n    children: /*#__PURE__*/_jsxDEV(Layer, {\n      offset: {\n        x: GRID_SIZE * TILE_SIZE / 2,\n        y: TILE_SIZE\n      },\n      children: tiles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_c2 = CanvasComponent;\nexport default CanvasComponent;\nvar _c, _c2;\n$RefreshReg$(_c, \"Tile\");\n$RefreshReg$(_c2, \"CanvasComponent\");","map":{"version":3,"names":["React","useState","Stage","Layer","Rect","jsxDEV","_jsxDEV","GRID_SIZE","TILE_SIZE","TILE_WIDTH","TILE_HEIGHT","Tile","gridX","gridY","_s","isHovered","setIsHovered","posX","posY","x","y","width","height","fill","strokeWidth","stroke","onMouseEnter","onMouseLeave","fileName","_jsxFileName","lineNumber","columnNumber","_c","CanvasComponent","tiles","i","j","push","children","offset","_c2","$RefreshReg$"],"sources":["C:/Users/Neo/Desktop/WWW/react/skynet/skynet/src/test/siatka-izometryczna.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Stage, Layer, Rect } from 'react-konva';\n\nconst GRID_SIZE = 50;\nconst TILE_SIZE = 30;\nconst TILE_WIDTH = TILE_SIZE;\nconst TILE_HEIGHT = TILE_SIZE / 2;\n\nfunction Tile({ gridX, gridY }) {\n  const [isHovered, setIsHovered] = useState(false);\n  \n  // Ustalamy izometryczne współrzędne\n  const posX = (gridX - gridY) * TILE_WIDTH / 2;\n  const posY = (gridX + gridY) * TILE_HEIGHT / 2;\n\n  return (\n    <Rect\n      x={posX}\n      y={posY}\n      width={TILE_WIDTH}\n      height={TILE_HEIGHT}\n      fill={isHovered ? '#f00' : ((gridX + gridY) % 2 === 0 ? '#ccc' : '#999')}\n      strokeWidth={1}\n      stroke=\"#000\"\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n    />\n  );\n}\n\nfunction CanvasComponent() {\n  const tiles = [];\n  for (let i = 0; i < GRID_SIZE; i++) {\n    for (let j = 0; j < GRID_SIZE; j++) {\n      tiles.push(<Tile gridX={i} gridY={j} key={`${i}-${j}`} />);\n    }\n  }\n\n  return (\n    <Stage width={GRID_SIZE * TILE_SIZE * 2} height={GRID_SIZE * TILE_SIZE}>\n      <Layer offset={{ x: GRID_SIZE * TILE_SIZE / 2, y: TILE_SIZE }}>\n        {tiles}\n      </Layer>\n    </Stage>\n  );\n}\n\nexport default CanvasComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,KAAK,EAAEC,KAAK,EAAEC,IAAI,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,SAAS,GAAG,EAAE;AACpB,MAAMC,SAAS,GAAG,EAAE;AACpB,MAAMC,UAAU,GAAGD,SAAS;AAC5B,MAAME,WAAW,GAAGF,SAAS,GAAG,CAAC;AAEjC,SAASG,IAAIA,CAAC;EAAEC,KAAK;EAAEC;AAAM,CAAC,EAAE;EAAAC,EAAA;EAC9B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;;EAEjD;EACA,MAAMgB,IAAI,GAAG,CAACL,KAAK,GAAGC,KAAK,IAAIJ,UAAU,GAAG,CAAC;EAC7C,MAAMS,IAAI,GAAG,CAACN,KAAK,GAAGC,KAAK,IAAIH,WAAW,GAAG,CAAC;EAE9C,oBACEJ,OAAA,CAACF,IAAI;IACHe,CAAC,EAAEF,IAAK;IACRG,CAAC,EAAEF,IAAK;IACRG,KAAK,EAAEZ,UAAW;IAClBa,MAAM,EAAEZ,WAAY;IACpBa,IAAI,EAAER,SAAS,GAAG,MAAM,GAAI,CAACH,KAAK,GAAGC,KAAK,IAAI,CAAC,KAAK,CAAC,GAAG,MAAM,GAAG,MAAQ;IACzEW,WAAW,EAAE,CAAE;IACfC,MAAM,EAAC,MAAM;IACbC,YAAY,EAAEA,CAAA,KAAMV,YAAY,CAAC,IAAI,CAAE;IACvCW,YAAY,EAAEA,CAAA,KAAMX,YAAY,CAAC,KAAK;EAAE;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzC,CAAC;AAEN;AAACjB,EAAA,CApBQH,IAAI;AAAAqB,EAAA,GAAJrB,IAAI;AAsBb,SAASsB,eAAeA,CAAA,EAAG;EACzB,MAAMC,KAAK,GAAG,EAAE;EAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG5B,SAAS,EAAE4B,CAAC,EAAE,EAAE;IAClC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG7B,SAAS,EAAE6B,CAAC,EAAE,EAAE;MAClCF,KAAK,CAACG,IAAI,eAAC/B,OAAA,CAACK,IAAI;QAACC,KAAK,EAAEuB,CAAE;QAACtB,KAAK,EAAEuB;MAAE,GAAO,GAAED,CAAE,IAAGC,CAAE,EAAC;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,CAAC;IAC5D;EACF;EAEA,oBACEzB,OAAA,CAACJ,KAAK;IAACmB,KAAK,EAAEd,SAAS,GAAGC,SAAS,GAAG,CAAE;IAACc,MAAM,EAAEf,SAAS,GAAGC,SAAU;IAAA8B,QAAA,eACrEhC,OAAA,CAACH,KAAK;MAACoC,MAAM,EAAE;QAAEpB,CAAC,EAAEZ,SAAS,GAAGC,SAAS,GAAG,CAAC;QAAEY,CAAC,EAAEZ;MAAU,CAAE;MAAA8B,QAAA,EAC3DJ;IAAK;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEZ;AAACS,GAAA,GAfQP,eAAe;AAiBxB,eAAeA,eAAe;AAAC,IAAAD,EAAA,EAAAQ,GAAA;AAAAC,YAAA,CAAAT,EAAA;AAAAS,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}