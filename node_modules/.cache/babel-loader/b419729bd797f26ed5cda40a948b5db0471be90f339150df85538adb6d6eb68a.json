{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Block = () => {\n  _s();\n  const navigate = useNavigate();\n  const role = localStorage.getItem('role');\n  useEffect(() => {\n    if (role !== 'admin') {\n      navigate('/login');\n    }\n  }, [navigate, role]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \"404\"\n  }, void 0, false);\n};\n_s(Block, \"0pNeyzXk/ByIxyERsdaIrG6js9s=\", false, function () {\n  return [useNavigate];\n});\n_c = Block;\nexport default Block;\n\n// import { Routes, Route, useNavigate } from 'react-router-dom';\n// import { useEffect, useState } from 'react';\n\n// export function checkRole() {\n//   const role = localStorage.getItem('role');\n//   return role === 'admin';\n// }\n\n// export const PrivateRoute = ({ path, ...props }) => {\n//   const navigate = useNavigate();\n//   const [allowed, setAllowed] = useState(checkRole());\n\n//   useEffect(() => {\n//     if (!allowed) {\n//       navigate('/login');\n//     }\n//   }, [allowed, navigate]);\n\n//   return allowed ? <Routes><Route path={path} {...props} /></Routes> : null;\n// };\nvar _c;\n$RefreshReg$(_c, \"Block\");","map":{"version":3,"names":["useEffect","useNavigate","Fragment","_Fragment","jsxDEV","_jsxDEV","Block","_s","navigate","role","localStorage","getItem","children","_c","$RefreshReg$"],"sources":["C:/Users/Neo/Desktop/WWW/react/skynet/skynet/src/PrivateRoute/PrivateRoute.js"],"sourcesContent":["import { useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst Block = () => {\r\n  const navigate = useNavigate();\r\n  const role = localStorage.getItem('role');\r\n\r\n  useEffect(() => {\r\n    if (role !== 'admin') {\r\n      navigate('/login');\r\n    }\r\n  }, [navigate, role]);\r\n\r\n  return (\r\n    <>\r\n    404</>\r\n  );\r\n};\r\n\r\nexport default Block;\r\n\r\n\r\n\r\n// import { Routes, Route, useNavigate } from 'react-router-dom';\r\n// import { useEffect, useState } from 'react';\r\n\r\n// export function checkRole() {\r\n//   const role = localStorage.getItem('role');\r\n//   return role === 'admin';\r\n// }\r\n\r\n// export const PrivateRoute = ({ path, ...props }) => {\r\n//   const navigate = useNavigate();\r\n//   const [allowed, setAllowed] = useState(checkRole());\r\n\r\n//   useEffect(() => {\r\n//     if (!allowed) {\r\n//       navigate('/login');\r\n//     }\r\n//   }, [allowed, navigate]);\r\n\r\n//   return allowed ? <Routes><Route path={path} {...props} /></Routes> : null;\r\n// };"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAMQ,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EAEzCX,SAAS,CAAC,MAAM;IACd,IAAIS,IAAI,KAAK,OAAO,EAAE;MACpBD,QAAQ,CAAC,QAAQ,CAAC;IACpB;EACF,CAAC,EAAE,CAACA,QAAQ,EAAEC,IAAI,CAAC,CAAC;EAEpB,oBACEJ,OAAA,CAAAF,SAAA;IAAAS,QAAA,EAAE;EACC,gBAAE,CAAC;AAEV,CAAC;AAACL,EAAA,CAdID,KAAK;EAAA,QACQL,WAAW;AAAA;AAAAY,EAAA,GADxBP,KAAK;AAgBX,eAAeA,KAAK;;AAIpB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}