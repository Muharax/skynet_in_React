{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/Neo/Desktop/WWW/react/skynet/skynet/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/Neo/Desktop/WWW/react/skynet/skynet/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"C:/Users/Neo/Desktop/WWW/react/skynet/skynet/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"C:/Users/Neo/Desktop/WWW/react/skynet/skynet/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"C:/Users/Neo/Desktop/WWW/react/skynet/skynet/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/Neo/Desktop/WWW/react/skynet/skynet/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TextPath = void 0;\nvar Util_1 = require(\"../Util\");\nvar Factory_1 = require(\"../Factory\");\nvar Shape_1 = require(\"../Shape\");\nvar Path_1 = require(\"./Path\");\nvar Text_1 = require(\"./Text\");\nvar Validators_1 = require(\"../Validators\");\nvar Global_1 = require(\"../Global\");\nvar EMPTY_STRING = '',\n  NORMAL = 'normal';\nfunction _fillFunc(context) {\n  context.fillText(this.partialText, 0, 0);\n}\nfunction _strokeFunc(context) {\n  context.strokeText(this.partialText, 0, 0);\n}\nvar TextPath = /*#__PURE__*/function (_Shape_1$Shape) {\n  _inherits(TextPath, _Shape_1$Shape);\n  var _super = _createSuper(TextPath);\n  function TextPath(config) {\n    var _this;\n    _classCallCheck(this, TextPath);\n    _this = _super.call(this, config);\n    _this.dummyCanvas = Util_1.Util.createCanvasElement();\n    _this.dataArray = [];\n    _this._readDataAttribute();\n    _this.on('dataChange.konva', function () {\n      this._readDataAttribute();\n      this._setTextData();\n    });\n    _this.on('textChange.konva alignChange.konva letterSpacingChange.konva kerningFuncChange.konva fontSizeChange.konva fontFamilyChange.konva', _this._setTextData);\n    _this._setTextData();\n    return _this;\n  }\n  _createClass(TextPath, [{\n    key: \"_getTextPathLength\",\n    value: function _getTextPathLength() {\n      return Path_1.Path.getPathLength(this.dataArray);\n    }\n  }, {\n    key: \"_getPointAtLength\",\n    value: function _getPointAtLength(length) {\n      if (!this.attrs.data) {\n        return null;\n      }\n      var totalLength = this.pathLength;\n      if (length - 1 > totalLength) {\n        return null;\n      }\n      return Path_1.Path.getPointAtLengthOfDataArray(length, this.dataArray);\n    }\n  }, {\n    key: \"_readDataAttribute\",\n    value: function _readDataAttribute() {\n      this.dataArray = Path_1.Path.parsePathData(this.attrs.data);\n      this.pathLength = this._getTextPathLength();\n    }\n  }, {\n    key: \"_sceneFunc\",\n    value: function _sceneFunc(context) {\n      context.setAttr('font', this._getContextFont());\n      context.setAttr('textBaseline', this.textBaseline());\n      context.setAttr('textAlign', 'left');\n      context.save();\n      var textDecoration = this.textDecoration();\n      var fill = this.fill();\n      var fontSize = this.fontSize();\n      var glyphInfo = this.glyphInfo;\n      if (textDecoration === 'underline') {\n        context.beginPath();\n      }\n      for (var i = 0; i < glyphInfo.length; i++) {\n        context.save();\n        var p0 = glyphInfo[i].p0;\n        context.translate(p0.x, p0.y);\n        context.rotate(glyphInfo[i].rotation);\n        this.partialText = glyphInfo[i].text;\n        context.fillStrokeShape(this);\n        if (textDecoration === 'underline') {\n          if (i === 0) {\n            context.moveTo(0, fontSize / 2 + 1);\n          }\n          context.lineTo(fontSize, fontSize / 2 + 1);\n        }\n        context.restore();\n      }\n      if (textDecoration === 'underline') {\n        context.strokeStyle = fill;\n        context.lineWidth = fontSize / 20;\n        context.stroke();\n      }\n      context.restore();\n    }\n  }, {\n    key: \"_hitFunc\",\n    value: function _hitFunc(context) {\n      context.beginPath();\n      var glyphInfo = this.glyphInfo;\n      if (glyphInfo.length >= 1) {\n        var p0 = glyphInfo[0].p0;\n        context.moveTo(p0.x, p0.y);\n      }\n      for (var i = 0; i < glyphInfo.length; i++) {\n        var p1 = glyphInfo[i].p1;\n        context.lineTo(p1.x, p1.y);\n      }\n      context.setAttr('lineWidth', this.fontSize());\n      context.setAttr('strokeStyle', this.colorKey);\n      context.stroke();\n    }\n  }, {\n    key: \"getTextWidth\",\n    value: function getTextWidth() {\n      return this.textWidth;\n    }\n  }, {\n    key: \"getTextHeight\",\n    value: function getTextHeight() {\n      Util_1.Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\n      return this.textHeight;\n    }\n  }, {\n    key: \"setText\",\n    value: function setText(text) {\n      return Text_1.Text.prototype.setText.call(this, text);\n    }\n  }, {\n    key: \"_getContextFont\",\n    value: function _getContextFont() {\n      return Text_1.Text.prototype._getContextFont.call(this);\n    }\n  }, {\n    key: \"_getTextSize\",\n    value: function _getTextSize(text) {\n      var dummyCanvas = this.dummyCanvas;\n      var _context = dummyCanvas.getContext('2d');\n      _context.save();\n      _context.font = this._getContextFont();\n      var metrics = _context.measureText(text);\n      _context.restore();\n      return {\n        width: metrics.width,\n        height: parseInt(\"\".concat(this.fontSize()), 10)\n      };\n    }\n  }, {\n    key: \"_setTextData\",\n    value: function _setTextData() {\n      var _this$_getTextSize = this._getTextSize(this.attrs.text),\n        width = _this$_getTextSize.width,\n        height = _this$_getTextSize.height;\n      this.textWidth = width;\n      this.textHeight = height;\n      this.glyphInfo = [];\n      if (!this.attrs.data) {\n        return null;\n      }\n      var letterSpacing = this.letterSpacing();\n      var align = this.align();\n      var kerningFunc = this.kerningFunc();\n      var textWidth = Math.max(this.textWidth + ((this.attrs.text || '').length - 1) * letterSpacing, 0);\n      var offset = 0;\n      if (align === 'center') {\n        offset = Math.max(0, this.pathLength / 2 - textWidth / 2);\n      }\n      if (align === 'right') {\n        offset = Math.max(0, this.pathLength - textWidth);\n      }\n      var charArr = (0, Text_1.stringToArray)(this.text());\n      var offsetToGlyph = offset;\n      for (var i = 0; i < charArr.length; i++) {\n        var charStartPoint = this._getPointAtLength(offsetToGlyph);\n        if (!charStartPoint) return;\n        var glyphWidth = this._getTextSize(charArr[i]).width + letterSpacing;\n        if (charArr[i] === ' ' && align === 'justify') {\n          var numberOfSpaces = this.text().split(' ').length - 1;\n          glyphWidth += (this.pathLength - textWidth) / numberOfSpaces;\n        }\n        var charEndPoint = this._getPointAtLength(offsetToGlyph + glyphWidth);\n        if (!charEndPoint) return;\n        var _width = Path_1.Path.getLineLength(charStartPoint.x, charStartPoint.y, charEndPoint.x, charEndPoint.y);\n        var kern = 0;\n        if (kerningFunc) {\n          try {\n            kern = kerningFunc(charArr[i - 1], charArr[i]) * this.fontSize();\n          } catch (e) {\n            kern = 0;\n          }\n        }\n        charStartPoint.x += kern;\n        charEndPoint.x += kern;\n        this.textWidth += kern;\n        var midpoint = Path_1.Path.getPointOnLine(kern + _width / 2.0, charStartPoint.x, charStartPoint.y, charEndPoint.x, charEndPoint.y);\n        var rotation = Math.atan2(charEndPoint.y - charStartPoint.y, charEndPoint.x - charStartPoint.x);\n        this.glyphInfo.push({\n          transposeX: midpoint.x,\n          transposeY: midpoint.y,\n          text: charArr[i],\n          rotation: rotation,\n          p0: charStartPoint,\n          p1: charEndPoint\n        });\n        offsetToGlyph += glyphWidth;\n      }\n    }\n  }, {\n    key: \"getSelfRect\",\n    value: function getSelfRect() {\n      if (!this.glyphInfo.length) {\n        return {\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        };\n      }\n      var points = [];\n      this.glyphInfo.forEach(function (info) {\n        points.push(info.p0.x);\n        points.push(info.p0.y);\n        points.push(info.p1.x);\n        points.push(info.p1.y);\n      });\n      var minX = points[0] || 0;\n      var maxX = points[0] || 0;\n      var minY = points[1] || 0;\n      var maxY = points[1] || 0;\n      var x, y;\n      for (var i = 0; i < points.length / 2; i++) {\n        x = points[i * 2];\n        y = points[i * 2 + 1];\n        minX = Math.min(minX, x);\n        maxX = Math.max(maxX, x);\n        minY = Math.min(minY, y);\n        maxY = Math.max(maxY, y);\n      }\n      var fontSize = this.fontSize();\n      return {\n        x: minX - fontSize / 2,\n        y: minY - fontSize / 2,\n        width: maxX - minX + fontSize,\n        height: maxY - minY + fontSize\n      };\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      Util_1.Util.releaseCanvas(this.dummyCanvas);\n      return _get(_getPrototypeOf(TextPath.prototype), \"destroy\", this).call(this);\n    }\n  }]);\n  return TextPath;\n}(Shape_1.Shape);\nexports.TextPath = TextPath;\nTextPath.prototype._fillFunc = _fillFunc;\nTextPath.prototype._strokeFunc = _strokeFunc;\nTextPath.prototype._fillFuncHit = _fillFunc;\nTextPath.prototype._strokeFuncHit = _strokeFunc;\nTextPath.prototype.className = 'TextPath';\nTextPath.prototype._attrsAffectingSize = ['text', 'fontSize', 'data'];\n(0, Global_1._registerNode)(TextPath);\nFactory_1.Factory.addGetterSetter(TextPath, 'data');\nFactory_1.Factory.addGetterSetter(TextPath, 'fontFamily', 'Arial');\nFactory_1.Factory.addGetterSetter(TextPath, 'fontSize', 12, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(TextPath, 'fontStyle', NORMAL);\nFactory_1.Factory.addGetterSetter(TextPath, 'align', 'left');\nFactory_1.Factory.addGetterSetter(TextPath, 'letterSpacing', 0, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(TextPath, 'textBaseline', 'middle');\nFactory_1.Factory.addGetterSetter(TextPath, 'fontVariant', NORMAL);\nFactory_1.Factory.addGetterSetter(TextPath, 'text', EMPTY_STRING);\nFactory_1.Factory.addGetterSetter(TextPath, 'textDecoration', null);\nFactory_1.Factory.addGetterSetter(TextPath, 'kerningFunc', null);","map":{"version":3,"names":["_classCallCheck","require","default","_createClass","_get","_getPrototypeOf","_inherits","_createSuper","Object","defineProperty","exports","value","TextPath","Util_1","Factory_1","Shape_1","Path_1","Text_1","Validators_1","Global_1","EMPTY_STRING","NORMAL","_fillFunc","context","fillText","partialText","_strokeFunc","strokeText","_Shape_1$Shape","_super","config","_this","call","dummyCanvas","Util","createCanvasElement","dataArray","_readDataAttribute","on","_setTextData","key","_getTextPathLength","Path","getPathLength","_getPointAtLength","length","attrs","data","totalLength","pathLength","getPointAtLengthOfDataArray","parsePathData","_sceneFunc","setAttr","_getContextFont","textBaseline","save","textDecoration","fill","fontSize","glyphInfo","beginPath","i","p0","translate","x","y","rotate","rotation","text","fillStrokeShape","moveTo","lineTo","restore","strokeStyle","lineWidth","stroke","_hitFunc","p1","colorKey","getTextWidth","textWidth","getTextHeight","warn","textHeight","setText","Text","prototype","_getTextSize","_context","getContext","font","metrics","measureText","width","height","parseInt","concat","_this$_getTextSize","letterSpacing","align","kerningFunc","Math","max","offset","charArr","stringToArray","offsetToGlyph","charStartPoint","glyphWidth","numberOfSpaces","split","charEndPoint","getLineLength","kern","e","midpoint","getPointOnLine","atan2","push","transposeX","transposeY","getSelfRect","points","forEach","info","minX","maxX","minY","maxY","min","destroy","releaseCanvas","Shape","_fillFuncHit","_strokeFuncHit","className","_attrsAffectingSize","_registerNode","Factory","addGetterSetter","getNumberValidator"],"sources":["C:/Users/Neo/Desktop/WWW/react/skynet/skynet/node_modules/konva/lib/shapes/TextPath.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TextPath = void 0;\nconst Util_1 = require(\"../Util\");\nconst Factory_1 = require(\"../Factory\");\nconst Shape_1 = require(\"../Shape\");\nconst Path_1 = require(\"./Path\");\nconst Text_1 = require(\"./Text\");\nconst Validators_1 = require(\"../Validators\");\nconst Global_1 = require(\"../Global\");\nvar EMPTY_STRING = '', NORMAL = 'normal';\nfunction _fillFunc(context) {\n    context.fillText(this.partialText, 0, 0);\n}\nfunction _strokeFunc(context) {\n    context.strokeText(this.partialText, 0, 0);\n}\nclass TextPath extends Shape_1.Shape {\n    constructor(config) {\n        super(config);\n        this.dummyCanvas = Util_1.Util.createCanvasElement();\n        this.dataArray = [];\n        this._readDataAttribute();\n        this.on('dataChange.konva', function () {\n            this._readDataAttribute();\n            this._setTextData();\n        });\n        this.on('textChange.konva alignChange.konva letterSpacingChange.konva kerningFuncChange.konva fontSizeChange.konva fontFamilyChange.konva', this._setTextData);\n        this._setTextData();\n    }\n    _getTextPathLength() {\n        return Path_1.Path.getPathLength(this.dataArray);\n    }\n    _getPointAtLength(length) {\n        if (!this.attrs.data) {\n            return null;\n        }\n        const totalLength = this.pathLength;\n        if (length - 1 > totalLength) {\n            return null;\n        }\n        return Path_1.Path.getPointAtLengthOfDataArray(length, this.dataArray);\n    }\n    _readDataAttribute() {\n        this.dataArray = Path_1.Path.parsePathData(this.attrs.data);\n        this.pathLength = this._getTextPathLength();\n    }\n    _sceneFunc(context) {\n        context.setAttr('font', this._getContextFont());\n        context.setAttr('textBaseline', this.textBaseline());\n        context.setAttr('textAlign', 'left');\n        context.save();\n        var textDecoration = this.textDecoration();\n        var fill = this.fill();\n        var fontSize = this.fontSize();\n        var glyphInfo = this.glyphInfo;\n        if (textDecoration === 'underline') {\n            context.beginPath();\n        }\n        for (var i = 0; i < glyphInfo.length; i++) {\n            context.save();\n            var p0 = glyphInfo[i].p0;\n            context.translate(p0.x, p0.y);\n            context.rotate(glyphInfo[i].rotation);\n            this.partialText = glyphInfo[i].text;\n            context.fillStrokeShape(this);\n            if (textDecoration === 'underline') {\n                if (i === 0) {\n                    context.moveTo(0, fontSize / 2 + 1);\n                }\n                context.lineTo(fontSize, fontSize / 2 + 1);\n            }\n            context.restore();\n        }\n        if (textDecoration === 'underline') {\n            context.strokeStyle = fill;\n            context.lineWidth = fontSize / 20;\n            context.stroke();\n        }\n        context.restore();\n    }\n    _hitFunc(context) {\n        context.beginPath();\n        var glyphInfo = this.glyphInfo;\n        if (glyphInfo.length >= 1) {\n            var p0 = glyphInfo[0].p0;\n            context.moveTo(p0.x, p0.y);\n        }\n        for (var i = 0; i < glyphInfo.length; i++) {\n            var p1 = glyphInfo[i].p1;\n            context.lineTo(p1.x, p1.y);\n        }\n        context.setAttr('lineWidth', this.fontSize());\n        context.setAttr('strokeStyle', this.colorKey);\n        context.stroke();\n    }\n    getTextWidth() {\n        return this.textWidth;\n    }\n    getTextHeight() {\n        Util_1.Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\n        return this.textHeight;\n    }\n    setText(text) {\n        return Text_1.Text.prototype.setText.call(this, text);\n    }\n    _getContextFont() {\n        return Text_1.Text.prototype._getContextFont.call(this);\n    }\n    _getTextSize(text) {\n        var dummyCanvas = this.dummyCanvas;\n        var _context = dummyCanvas.getContext('2d');\n        _context.save();\n        _context.font = this._getContextFont();\n        var metrics = _context.measureText(text);\n        _context.restore();\n        return {\n            width: metrics.width,\n            height: parseInt(`${this.fontSize()}`, 10),\n        };\n    }\n    _setTextData() {\n        const { width, height } = this._getTextSize(this.attrs.text);\n        this.textWidth = width;\n        this.textHeight = height;\n        this.glyphInfo = [];\n        if (!this.attrs.data) {\n            return null;\n        }\n        const letterSpacing = this.letterSpacing();\n        const align = this.align();\n        const kerningFunc = this.kerningFunc();\n        const textWidth = Math.max(this.textWidth + ((this.attrs.text || '').length - 1) * letterSpacing, 0);\n        let offset = 0;\n        if (align === 'center') {\n            offset = Math.max(0, this.pathLength / 2 - textWidth / 2);\n        }\n        if (align === 'right') {\n            offset = Math.max(0, this.pathLength - textWidth);\n        }\n        const charArr = (0, Text_1.stringToArray)(this.text());\n        let offsetToGlyph = offset;\n        for (var i = 0; i < charArr.length; i++) {\n            const charStartPoint = this._getPointAtLength(offsetToGlyph);\n            if (!charStartPoint)\n                return;\n            let glyphWidth = this._getTextSize(charArr[i]).width + letterSpacing;\n            if (charArr[i] === ' ' && align === 'justify') {\n                const numberOfSpaces = this.text().split(' ').length - 1;\n                glyphWidth += (this.pathLength - textWidth) / numberOfSpaces;\n            }\n            const charEndPoint = this._getPointAtLength(offsetToGlyph + glyphWidth);\n            if (!charEndPoint)\n                return;\n            const width = Path_1.Path.getLineLength(charStartPoint.x, charStartPoint.y, charEndPoint.x, charEndPoint.y);\n            let kern = 0;\n            if (kerningFunc) {\n                try {\n                    kern = kerningFunc(charArr[i - 1], charArr[i]) * this.fontSize();\n                }\n                catch (e) {\n                    kern = 0;\n                }\n            }\n            charStartPoint.x += kern;\n            charEndPoint.x += kern;\n            this.textWidth += kern;\n            const midpoint = Path_1.Path.getPointOnLine(kern + width / 2.0, charStartPoint.x, charStartPoint.y, charEndPoint.x, charEndPoint.y);\n            const rotation = Math.atan2(charEndPoint.y - charStartPoint.y, charEndPoint.x - charStartPoint.x);\n            this.glyphInfo.push({\n                transposeX: midpoint.x,\n                transposeY: midpoint.y,\n                text: charArr[i],\n                rotation: rotation,\n                p0: charStartPoint,\n                p1: charEndPoint,\n            });\n            offsetToGlyph += glyphWidth;\n        }\n    }\n    getSelfRect() {\n        if (!this.glyphInfo.length) {\n            return {\n                x: 0,\n                y: 0,\n                width: 0,\n                height: 0,\n            };\n        }\n        var points = [];\n        this.glyphInfo.forEach(function (info) {\n            points.push(info.p0.x);\n            points.push(info.p0.y);\n            points.push(info.p1.x);\n            points.push(info.p1.y);\n        });\n        var minX = points[0] || 0;\n        var maxX = points[0] || 0;\n        var minY = points[1] || 0;\n        var maxY = points[1] || 0;\n        var x, y;\n        for (var i = 0; i < points.length / 2; i++) {\n            x = points[i * 2];\n            y = points[i * 2 + 1];\n            minX = Math.min(minX, x);\n            maxX = Math.max(maxX, x);\n            minY = Math.min(minY, y);\n            maxY = Math.max(maxY, y);\n        }\n        var fontSize = this.fontSize();\n        return {\n            x: minX - fontSize / 2,\n            y: minY - fontSize / 2,\n            width: maxX - minX + fontSize,\n            height: maxY - minY + fontSize,\n        };\n    }\n    destroy() {\n        Util_1.Util.releaseCanvas(this.dummyCanvas);\n        return super.destroy();\n    }\n}\nexports.TextPath = TextPath;\nTextPath.prototype._fillFunc = _fillFunc;\nTextPath.prototype._strokeFunc = _strokeFunc;\nTextPath.prototype._fillFuncHit = _fillFunc;\nTextPath.prototype._strokeFuncHit = _strokeFunc;\nTextPath.prototype.className = 'TextPath';\nTextPath.prototype._attrsAffectingSize = ['text', 'fontSize', 'data'];\n(0, Global_1._registerNode)(TextPath);\nFactory_1.Factory.addGetterSetter(TextPath, 'data');\nFactory_1.Factory.addGetterSetter(TextPath, 'fontFamily', 'Arial');\nFactory_1.Factory.addGetterSetter(TextPath, 'fontSize', 12, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(TextPath, 'fontStyle', NORMAL);\nFactory_1.Factory.addGetterSetter(TextPath, 'align', 'left');\nFactory_1.Factory.addGetterSetter(TextPath, 'letterSpacing', 0, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(TextPath, 'textBaseline', 'middle');\nFactory_1.Factory.addGetterSetter(TextPath, 'fontVariant', NORMAL);\nFactory_1.Factory.addGetterSetter(TextPath, 'text', EMPTY_STRING);\nFactory_1.Factory.addGetterSetter(TextPath, 'textDecoration', null);\nFactory_1.Factory.addGetterSetter(TextPath, 'kerningFunc', null);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}