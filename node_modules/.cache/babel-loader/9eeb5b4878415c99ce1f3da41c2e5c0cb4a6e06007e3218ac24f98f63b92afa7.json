{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Neo\\\\Desktop\\\\WWW\\\\react\\\\skynet\\\\skynet\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useState, useEffect } from \"react\";\nimport MainWindow from './MainWindow/MainWindow';\nimport AdminWindow from './AdminWindow/AdminWindow'; // przyjmujemy, że to jest widok dla admina\nimport Logowanie from './logowanie/logowanie';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [loggedIn, setLoggedIn] = useState(JSON.parse(localStorage.getItem(\"loggedIn\")) || false);\n  const [role, setRole] = useState(localStorage.getItem(\"role\") || \"user\"); // domyślnie role użytkownika ustawiamy jako \"user\"\n  const [serverMessage, setServerMessage] = useState(null);\n  useEffect(() => {\n    // ustawiamy rolę w localStorage podczas logowania\n    localStorage.setItem(\"role\", role);\n  }, [role]);\n  const handleLogin = (message, userRole) => {\n    setLoggedIn(true);\n    setRole(userRole); // ustawiamy rolę na podstawie danych przekazanych podczas logowania\n    setServerMessage(message);\n    localStorage.setItem(\"loggedIn\", true);\n  };\n  const handleLogout = () => {\n    setLoggedIn(false);\n    setRole(\"user\"); // resetujemy rolę do \"user\" po wylogowaniu\n    setServerMessage(null);\n    localStorage.removeItem(\"loggedIn\");\n    localStorage.removeItem(\"role\"); // usuwamy również rolę z localStorage\n  };\n\n  // renderujemy różne widoki w zależności od roli\n  return loggedIn ? role === \"admin\" ? /*#__PURE__*/_jsxDEV(AdminWindow, {\n    handleLogout: handleLogout,\n    serverMessage: serverMessage\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 27\n  }, this) : /*#__PURE__*/_jsxDEV(MainWindow, {\n    handleLogout: handleLogout,\n    serverMessage: serverMessage\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 103\n  }, this) : /*#__PURE__*/_jsxDEV(Logowanie, {\n    handleLogin: handleLogin\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"XsgQrQVWgB+1Li4wil82gJpc9AA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","MainWindow","AdminWindow","Logowanie","jsxDEV","_jsxDEV","App","_s","loggedIn","setLoggedIn","JSON","parse","localStorage","getItem","role","setRole","serverMessage","setServerMessage","setItem","handleLogin","message","userRole","handleLogout","removeItem","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Neo/Desktop/WWW/react/skynet/skynet/src/App.js"],"sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from \"react\";\nimport MainWindow from './MainWindow/MainWindow';\nimport AdminWindow from './AdminWindow/AdminWindow'; // przyjmujemy, że to jest widok dla admina\nimport Logowanie from './logowanie/logowanie';\n\nfunction App() {\n  const [loggedIn, setLoggedIn] = useState(JSON.parse(localStorage.getItem(\"loggedIn\")) || false);\n  const [role, setRole] = useState(localStorage.getItem(\"role\") || \"user\"); // domyślnie role użytkownika ustawiamy jako \"user\"\n  const [serverMessage, setServerMessage] = useState(null);\n\n  useEffect(() => {\n    // ustawiamy rolę w localStorage podczas logowania\n    localStorage.setItem(\"role\", role);\n  }, [role]);\n\n  const handleLogin = (message, userRole) => {\n    setLoggedIn(true);\n    setRole(userRole); // ustawiamy rolę na podstawie danych przekazanych podczas logowania\n    setServerMessage(message);\n    localStorage.setItem(\"loggedIn\", true);\n  };\n\n  const handleLogout = () => {\n    setLoggedIn(false);\n    setRole(\"user\"); // resetujemy rolę do \"user\" po wylogowaniu\n    setServerMessage(null);\n    localStorage.removeItem(\"loggedIn\");\n    localStorage.removeItem(\"role\"); // usuwamy również rolę z localStorage\n  };\n\n  // renderujemy różne widoki w zależności od roli\n  return loggedIn \n    ? (role === \"admin\" ? <AdminWindow handleLogout={handleLogout} serverMessage={serverMessage} /> : <MainWindow handleLogout={handleLogout} serverMessage={serverMessage} />)\n    : <Logowanie handleLogin={handleLogin} />\n}\n\nexport default App;"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,WAAW,MAAM,2BAA2B,CAAC,CAAC;AACrD,OAAOC,SAAS,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAACW,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,KAAK,CAAC;EAC/F,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAACa,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC;EAC1E,MAAM,CAACG,aAAa,EAAEC,gBAAgB,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAExDC,SAAS,CAAC,MAAM;IACd;IACAY,YAAY,CAACM,OAAO,CAAC,MAAM,EAAEJ,IAAI,CAAC;EACpC,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EAEV,MAAMK,WAAW,GAAGA,CAACC,OAAO,EAAEC,QAAQ,KAAK;IACzCZ,WAAW,CAAC,IAAI,CAAC;IACjBM,OAAO,CAACM,QAAQ,CAAC,CAAC,CAAC;IACnBJ,gBAAgB,CAACG,OAAO,CAAC;IACzBR,YAAY,CAACM,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC;EACxC,CAAC;EAED,MAAMI,YAAY,GAAGA,CAAA,KAAM;IACzBb,WAAW,CAAC,KAAK,CAAC;IAClBM,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;IACjBE,gBAAgB,CAAC,IAAI,CAAC;IACtBL,YAAY,CAACW,UAAU,CAAC,UAAU,CAAC;IACnCX,YAAY,CAACW,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;EACnC,CAAC;;EAED;EACA,OAAOf,QAAQ,GACVM,IAAI,KAAK,OAAO,gBAAGT,OAAA,CAACH,WAAW;IAACoB,YAAY,EAAEA,YAAa;IAACN,aAAa,EAAEA;EAAc;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,gBAAGtB,OAAA,CAACJ,UAAU;IAACqB,YAAY,EAAEA,YAAa;IAACN,aAAa,EAAEA;EAAc;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,gBACxKtB,OAAA,CAACF,SAAS;IAACgB,WAAW,EAAEA;EAAY;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC7C;AAACpB,EAAA,CA7BQD,GAAG;AAAAsB,EAAA,GAAHtB,GAAG;AA+BZ,eAAeA,GAAG;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}