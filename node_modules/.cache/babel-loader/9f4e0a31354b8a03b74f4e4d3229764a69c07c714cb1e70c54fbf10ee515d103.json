{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Neo\\\\Desktop\\\\WWW\\\\react\\\\skynet\\\\skynet\\\\src\\\\test\\\\test3-ApolloTest.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_HELLO = gql`\n  query GetHello {\n    hello\n  }\n`;\nfunction Test3() {\n  _s();\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_HELLO);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error :(\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"To jest strona TESTOWA APOLLO\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Zalety GraphQL (Apollo) nad REST: Jedno zapytanie, wiele odpowiedzi: W GraphQL mo\\u017Cna pobra\\u0107 wiele zasob\\xF3w za jednym zamachem, co mo\\u017Ce poprawi\\u0107 wydajno\\u015B\\u0107 sieci. Precyzyjne dane: Klienty GraphQL mog\\u0105 specyfikowa\\u0107 dok\\u0142adnie te dane, kt\\xF3re chc\\u0105 otrzyma\\u0107, co mo\\u017Ce pom\\xF3c w ograniczeniu ilo\\u015Bci przesy\\u0142anych danych. Silne typowanie: GraphQL u\\u017Cywa silnego typowania, co mo\\u017Ce poprawi\\u0107 jako\\u015B\\u0107 kodu, pomagaj\\u0105c zapobiec pewnym rodzajom b\\u0142\\u0119d\\xF3w. Real-time data: GraphQL obs\\u0142uguje subskrypcje, kt\\xF3re umo\\u017Cliwiaj\\u0105 aktualizacj\\u0119 danych w czasie rzeczywistym. Zalety REST nad GraphQL (Apollo): Prostota: REST jest prostszy w zrozumieniu i implementacji, zw\\u0142aszcza dla ma\\u0142ych projekt\\xF3w. Caching: REST ma lepsze wsparcie dla cachowania na poziomie HTTP, co mo\\u017Ce poprawi\\u0107 wydajno\\u015B\\u0107. Wsparcie narz\\u0119dzi i bibliotek: Poniewa\\u017C REST jest starszy, ma lepsze wsparcie w wielu narz\\u0119dziach i bibliotekach. Kompatybilno\\u015B\\u0107: Praktycznie ka\\u017Cda platforma i j\\u0119zyk maj\\u0105 wsparcie dla REST, podczas gdy GraphQL wymaga specjalnego klienta, takiego jak Apollo.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: `Message: ${data.hello}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n}\n_s(Test3, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n_c = Test3;\nexport default Test3;\nvar _c;\n$RefreshReg$(_c, \"Test3\");","map":{"version":3,"names":["React","useQuery","gql","jsxDEV","_jsxDEV","GET_HELLO","Test3","_s","loading","error","data","children","fileName","_jsxFileName","lineNumber","columnNumber","hello","_c","$RefreshReg$"],"sources":["C:/Users/Neo/Desktop/WWW/react/skynet/skynet/src/test/test3-ApolloTest.js"],"sourcesContent":["import React from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\n\nconst GET_HELLO = gql`\n  query GetHello {\n    hello\n  }\n`;\n\nfunction Test3() {\n  const { loading, error, data } = useQuery(GET_HELLO);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return (\n    <div>\n      <h1>To jest strona TESTOWA APOLLO</h1>\n      <div>\n        Zalety GraphQL (Apollo) nad REST:\n\n        Jedno zapytanie, wiele odpowiedzi: W GraphQL można pobrać wiele zasobów za jednym zamachem, co może poprawić wydajność sieci.\n\n        Precyzyjne dane: Klienty GraphQL mogą specyfikować dokładnie te dane, które chcą otrzymać, co może pomóc w ograniczeniu ilości przesyłanych danych.\n\n        Silne typowanie: GraphQL używa silnego typowania, co może poprawić jakość kodu, pomagając zapobiec pewnym rodzajom błędów.\n\n        Real-time data: GraphQL obsługuje subskrypcje, które umożliwiają aktualizację danych w czasie rzeczywistym.\n\n        Zalety REST nad GraphQL (Apollo):\n\n        Prostota: REST jest prostszy w zrozumieniu i implementacji, zwłaszcza dla małych projektów.\n\n        Caching: REST ma lepsze wsparcie dla cachowania na poziomie HTTP, co może poprawić wydajność.\n\n        Wsparcie narzędzi i bibliotek: Ponieważ REST jest starszy, ma lepsze wsparcie w wielu narzędziach i bibliotekach.\n\n        Kompatybilność: Praktycznie każda platforma i język mają wsparcie dla REST, podczas gdy GraphQL wymaga specjalnego klienta, takiego jak Apollo.\n      </div>\n      <p>{`Message: ${data.hello}`}</p>\n    </div>\n  );\n}\n\nexport default Test3;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,GAAG,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,SAAS,GAAGH,GAAI;AACtB;AACA;AACA;AACA,CAAC;AAED,SAASI,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM;IAAEC,OAAO;IAAEC,KAAK;IAAEC;EAAK,CAAC,GAAGT,QAAQ,CAACI,SAAS,CAAC;EAEpD,IAAIG,OAAO,EAAE,oBAAOJ,OAAA;IAAAO,QAAA,EAAG;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EACrC,IAAIN,KAAK,EAAE,oBAAOL,OAAA;IAAAO,QAAA,EAAG;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EAEjC,oBACEX,OAAA;IAAAO,QAAA,gBACEP,OAAA;MAAAO,QAAA,EAAI;IAA6B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtCX,OAAA;MAAAO,QAAA,EAAK;IAoBL;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACNX,OAAA;MAAAO,QAAA,EAAK,YAAWD,IAAI,CAACM,KAAM;IAAC;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9B,CAAC;AAEV;AAACR,EAAA,CAjCQD,KAAK;EAAA,QACqBL,QAAQ;AAAA;AAAAgB,EAAA,GADlCX,KAAK;AAmCd,eAAeA,KAAK;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}